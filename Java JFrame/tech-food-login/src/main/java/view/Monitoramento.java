package view;

import com.github.britooo.looca.api.core.Looca;
import com.github.britooo.looca.api.group.discos.Disco;
import com.github.britooo.looca.api.group.memoria.Memoria;
import com.github.britooo.looca.api.group.processos.Processo;
import com.github.britooo.looca.api.util.Conversor;
import java.awt.Color;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;

/**
 *
 * @author bruno.dearaujo
 */
public class Monitoramento extends javax.swing.JFrame {
    gravarArq gravar = new gravarArq();
    /**
     * Creates new form Monitoramento
     */
    private Computador computador;
    private MonitoramentoRam monitoramentoRam; 
    private MonitoramentoCpu monitoramentoCpu;
    private List<MonitoramentoDisco> monitoramentoDiscos;
    private Looca looca;

    public Monitoramento(Computador computador) {
        checkReiniciar.setToolTipText("Reinciar a m√°quina caso o consume de CPU ou RAM chegue a 90%");
        this.computador = computador;
        // Deixando a tela no centro;
        cadastrarComponentes();
        setLocationRelativeTo(null);
        initComponents();
        sistemaOperacional();
        monitoramentoGeral();
        monitoramentoRam = new MonitoramentoRam();
        monitoramentoCpu = new MonitoramentoCpu();
        monitoramentoDiscos = new ArrayList<>();
        looca = new Looca();

        for (Disco monitoramentoDisco1 : looca.getGrupoDeDiscos().getDiscos()) {
            MonitoramentoDisco monitoramentoDisco = new MonitoramentoDisco();
            monitoramentoDiscos.add(monitoramentoDisco);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        sistemaOperacional = new javax.swing.JLabel();
        dadosCpu = new javax.swing.JLabel();
        dadosDisco = new javax.swing.JLabel();
        dadosRam = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        hostName = new javax.swing.JLabel();
        checkReiniciar = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(177, 66, 0));
        jLabel1.setText("Monitoramento");

        jLabel2.setText("Sistema Operacional");

        jLabel3.setText("CPU");

        jLabel4.setText("Disco");

        jLabel5.setText("Ram");

        sistemaOperacional.setText("| ___________________");

        dadosCpu.setText("| __________________");

        dadosDisco.setText("| ___________________");

        dadosRam.setText("| ___________________");

        jLabel10.setText("Hostname");

        hostName.setText("| ___________________");

        checkReiniciar.setText("Reinciar maquina");
        checkReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkReiniciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)
                            .addComponent(jLabel10))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sistemaOperacional, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dadosDisco)
                            .addComponent(dadosCpu)
                            .addComponent(dadosRam)
                            .addComponent(hostName))
                        .addContainerGap(91, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkReiniciar)
                        .addGap(63, 63, 63))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkReiniciar))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(sistemaOperacional))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dadosCpu))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dadosDisco))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dadosRam))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(hostName))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkReiniciarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkReiniciarActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Monitoramento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Monitoramento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Monitoramento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Monitoramento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        Looca looca = new Looca();
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Monitoramento().setVisible(true);
//            }
//
//        });
//
//    }
    public void cadastrarComponentes() {
        Looca looca = new Looca();
        Connection config = new Connection();
        JdbcTemplate template = new JdbcTemplate(config.getDataSource());
        JdbcTemplate templateLocal = new JdbcTemplate(config.getDataSourceLocal());

        List qtdComponentesLocal = templateLocal.queryForList(
                "SELECT * from computadorComponente WHERE fkComputador = ?", computador.getidComputador());
        
        List qtdComponentes = template.queryForList(
                "SELECT * from computadorComponente WHERE fkComputador = ?", computador.getidComputador());

        if (qtdComponentes.isEmpty()) {

            List<Disco> discos = looca.getGrupoDeDiscos().getDiscos();

            String ramConvertida = Conversor.formatarBytes(looca.getMemoria().getTotal()).replaceAll("[a-zA-Z]", "").replace(",", ".");
            String cpuConvertido = Conversor.formatarBytes(looca.getProcessador().getFrequencia()).replaceAll("[a-zA-Z]", "").replace(",", ".");

            templateLocal.update(
                    "INSERT INTO computadorComponente (fkComputador, fkComponente, TotalComponente, UnidadeDeMedida)"
                    + "VALUES(?, 1, ?, 'GB')",
                    computador.getidComputador(), Double.valueOf(ramConvertida));
            
            String mensagemID = String.format("Banco de Dados Local: Dados coletados do id: %d ", computador.getidComputador());
            gravar.criarLog(mensagemID);
            String mensagemRam = String.format("Banco de Dados Local: Dados coletados da RAM: %s ", ramConvertida);
            gravar.criarLog(mensagemRam);
            
            templateLocal.update(
                    "INSERT INTO computadorComponente (fkComputador, fkComponente, TotalComponente, UnidadeDeMedida)"
                    + "VALUES(?, 2, ?, 'GB')",
                    computador.getidComputador(), Double.valueOf(cpuConvertido));
            
            gravar.criarLog(mensagemID);
            String mensagemCPU = String.format("Banco de Dados Local: Dados coletados da CPU: %s ", cpuConvertido);
            gravar.criarLog(mensagemCPU);
            
            template.update(
                    "INSERT INTO computadorComponente (fkComputador, fkComponente, TotalComponente, UnidadeDeMedida)"
                    + "VALUES(?, 1, ?, 'GB')",
                    computador.getidComputador(), ramConvertida);
            
            String mensagemIdAzure = String.format("Banco de Dados da Azure: Dados coletados do id: %d ", computador.getidComputador());
            gravar.criarLog(mensagemIdAzure);
            String mensagemRamAzure = String.format("Banco de Dados da Azure: Dados coletados da RAM: %s ", ramConvertida);
            gravar.criarLog(mensagemRamAzure);

            template.update(
                    "INSERT INTO computadorComponente (fkComputador, fkComponente, TotalComponente, UnidadeDeMedida)"
                    + "VALUES(?, 2, ?, 'GB')",
                    computador.getidComputador(), cpuConvertido);
            
            gravar.criarLog(mensagemIdAzure);
            String mensagemCpuAzure = String.format("Banco de Dados da Azure: Dados coletados da CPU: %s ", cpuConvertido);
            gravar.criarLog(mensagemCpuAzure);
            
            for (Disco disco : discos) {
                String discoConvertido = Conversor.formatarBytes(disco.getTamanho()).replaceAll("[a-zA-Z]", "").replace(",", ".");
                
                templateLocal.update(
                        "INSERT INTO computadorComponente (fkComputador, fkComponente, TotalComponente, UnidadeDeMedida)"
                        + "VALUES(?, 3, ?, 'GB')",
                        computador.getidComputador(), Double.valueOf(discoConvertido));
                
                gravar.criarLog(mensagemID);
                String mensagemDisco = String.format("Banco de Dados Local: Dados coletados no Disco: %s ", discoConvertido);
                gravar.criarLog(mensagemDisco);
                
                template.update(
                        "INSERT INTO computadorComponente (fkComputador, fkComponente, TotalComponente, UnidadeDeMedida)"
                        + "VALUES(?, 3, ?, 'GB')",
                        computador.getidComputador(), discoConvertido);
                
                gravar.criarLog(mensagemIdAzure);
                String mensagemDiscoAzure = String.format("Banco de Dados da Azure: Dados coletados da RAM: %s ", discoConvertido);
                gravar.criarLog(mensagemDiscoAzure);
                
            }

        }

    }

    public void enviarRelatorio() {
        SlackIntegration slack = new SlackIntegration();
        Looca looca = new Looca();
        Connection config = new Connection();
        JdbcTemplate template = new JdbcTemplate(config.getDataSource());

    }

    public void monitoramentoGeral() {

        // Inst√¢ncias de captura dos dados
        Looca looca = new Looca();

        // Inst√¢ncias para inserir no banco
        Connection config = new Connection();
        JdbcTemplate monitorar = new JdbcTemplate(config.getDataSource());
        JdbcTemplate monitorarLocal = new JdbcTemplate(config.getDataSourceLocal());

        String queryListaComponentes
                = "SELECT idComputadorComponente, "
                + "fkComputador, "
                + "fkComponente, "
                + "TotalComponente totalComponente, "
                + "UnidadeDeMedida unidadeMedida "
                + "FROM "
                + "computadorComponente WHERE fkComputador = ?";

        List<ComputadorComponente> listaComponentes = monitorar.query(queryListaComponentes, new BeanPropertyRowMapper<>(ComputadorComponente.class), computador.getidComputador());
        System.out.println(listaComponentes);
        
        String mensagemComponentesAzure = "";
        for (ComputadorComponente listaComponente : listaComponentes) {
            mensagemComponentesAzure = listaComponente + ",";
        }
        gravar.criarLog(mensagemComponentesAzure);
        
        List<ComputadorComponente> listaComponentesLocal = monitorarLocal.query(queryListaComponentes, new BeanPropertyRowMapper<>(ComputadorComponente.class), computador.getidComputador());
        System.out.println(listaComponentesLocal);
        
         String mensagemComponentesLocal = "";
        for (ComputadorComponente computadorComponente : listaComponentesLocal) {
            mensagemComponentesLocal = computadorComponente + ",";
        }
        gravar.criarLog(mensagemComponentesLocal);

        new Thread(new Runnable() {
            @Override
            public void run() {

                try {
                    while (true) {
                        Memoria memoria = looca.getMemoria();
                        List<Disco> discos = looca.getGrupoDeDiscos().getDiscos();
                        String ramConvertida = Conversor.formatarBytes(memoria.getEmUso()).replaceAll("[a-zA-Z]", "").replace(",", ".");
                        Double cpuUso = looca.getProcessador().getUso();
                        BigDecimal cpuPorcentagem = new BigDecimal(looca.getProcessador().getUso()).setScale(2, RoundingMode.HALF_EVEN);

                        System.out.println(computador.toString());
                        String exibirDadosDisco = "Em Uso: " + Conversor.formatarBytes(looca.getGrupoDeDiscos().getDiscos().get(0).getBytesDeEscritas())
                                + "   |  Total: " + Conversor.formatarBytes(looca.getGrupoDeDiscos().getDiscos().get(0).getTamanho());

                        String exibirDadosCpu = "Em Uso: " + cpuPorcentagem + "%";

                        String exibirDadosRam = "Em Uso: " + Conversor.formatarBytes(looca.getMemoria().getEmUso())
                                + "   |  Total: " + (Conversor.formatarBytes(looca.getMemoria().getTotal()));
                        String exibirHostname = computador.getHostnameComputador();

                        dadosCpu.setText(exibirDadosCpu);
                        dadosDisco.setText(exibirDadosDisco);
                        dadosRam.setText(exibirDadosRam);
                        hostName.setText(exibirHostname);
                        
                        gravar.criarLog(exibirHostname);
                        gravar.criarLog(exibirDadosCpu);
                        gravar.criarLog(exibirDadosDisco);
                        gravar.criarLog(exibirDadosRam);
                        
                        monitorar.update(
                                "INSERT INTO registroComponente (fkComputadorComponente, ValorConsumido, DataHora, statusComputador)"
                                + "VALUES"
                                + "(?, ?, getdate(), 'Ativo')",
                                listaComponentes.get(0).getIdComputadorComponente(), ramConvertida);
                        
                        String componenteAzure = String.format("Banco de Dados da Azure: ID Componente:", listaComponentes.get(0).getIdComputadorComponente());
                        gravar.criarLog(componenteAzure);
                        String mensagemRamAzure = String.format("Banco de Dados da Azure: Dados coletados da RAM:", ramConvertida);
                        gravar.criarLog(mensagemRamAzure);
                        
                        monitorarLocal.update(
                                "INSERT INTO registroComponente (fkComputadorComponente, ValorConsumido, DataHora, statusComputador)"
                                + "VALUES"
                                + "(?, ?, now(), 'Ativo')",
                                listaComponentesLocal.get(0).getIdComputadorComponente(), Double.valueOf(ramConvertida));
                        
                        String componenteLocal = String.format("Banco de Dados da Azure: ID Componente:", listaComponentes.get(0).getIdComputadorComponente());
                        gravar.criarLog(componenteLocal);
                        String mensagemRamLocal = String.format("Banco de Dados da Azure: Dados coletados da RAM:", ramConvertida);
                        gravar.criarLog(mensagemRamLocal);
                        
                        Double percentualRamUso = memoria.getEmUso() / Double.valueOf(memoria.getTotal()) * 100;

                        if (monitoramentoCpu.monitorarCpu70(cpuUso)) {
                            dadosCpu.setForeground(Color.yellow);
                            finalizarProcessos();
                            String mensagemSlack70 = String.format("Componente CPU passou de 70%");
                            gravar.criarLog(mensagemSlack70);
                            String mensagemSlackProcessos = String.format("Finalizando Processos");
                            gravar.criarLog(mensagemSlackProcessos);
                        }

                        if (monitoramentoCpu.monitorarCpu90(cpuUso)) {
                            dadosCpu.setForeground(Color.RED);
                            String mensagemSlack90 = String.format("Componente CPU passou de 90%");
                            gravar.criarLog(mensagemSlack90);
                            reiniciarMaquina();
                        }

                        if (monitoramentoRam.monitorarRam70(percentualRamUso)) {
                            dadosRam.setForeground(Color.yellow);
                            finalizarProcessos();
                            String mensagemSlackProcessos = String.format("Finalizando Processos");
                            gravar.criarLog(mensagemSlackProcessos);
                        }

                        if (monitoramentoRam.monitorarRam90(percentualRamUso)) {
                            dadosRam.setForeground(Color.RED);
                            String mensagemSlack90 = String.format("Componente CPU passou de 90%");
                            gravar.criarLog(mensagemSlack90);
                            reiniciarMaquina();
                        }

                        monitorar.update(
                                "INSERT INTO registroComponente (fkComputadorComponente, ValorConsumido, DataHora, statusComputador)"
                                + "VALUES"
                                + "(?, ?, getdate(), 'Ativo')",
                                listaComponentes.get(1).getIdComputadorComponente(), cpuUso);
                        
                        String componente1Azure = String.format("Banco de Dados Azure: ID Componente:", listaComponentes.get(0).getIdComputadorComponente());
                        gravar.criarLog(componente1Azure);
                        String mensagemCpuAzure = String.format("Banco de Dados Azure: Dados coletados da RAM:", cpuUso);
                        gravar.criarLog(mensagemCpuAzure);
                        
                        monitorarLocal.update(
                                "INSERT INTO registroComponente (fkComputadorComponente, ValorConsumido, DataHora, statusComputador)"
                                + "VALUES"
                                + "(?, ?, now(), 'Ativo')",
                                listaComponentesLocal.get(1).getIdComputadorComponente(), Double.valueOf(cpuUso));
                        
                        String componente1Local = String.format("Banco de Dados Local: ID Componente:", listaComponentes.get(1).getIdComputadorComponente());
                        gravar.criarLog(componente1Local);
                        String mensagemCPULocal = String.format("Banco de Dados Local: Dados coletados da CPU:", cpuUso);
                        gravar.criarLog(mensagemCPULocal);

                        for (int i = 0; i < discos.size(); i++) {
                            String discoConvertido = Conversor.formatarBytes(discos.get(i).getBytesDeEscritas()).replaceAll("[a-zA-Z]", "").replace(",", ".");
                            monitorar.update(
                                    "INSERT INTO registroComponente (fkComputadorComponente, ValorConsumido, DataHora, statusComputador)"
                                    + "VALUES"
                                    + "(?, ?, getdate(), 'Ativo')",
                                    listaComponentes.get(2 + i).getIdComputadorComponente(), discoConvertido);
                            
                            String componente3Azure = String.format("Banco de Dados Azure: ID Componente:", listaComponentes.get(2+i).getIdComputadorComponente());
                            gravar.criarLog(componente3Azure);
                            String mensagemDiscoAzure = String.format("Banco de Dados Azure: Dados coletados do Disco:", discoConvertido);
                            gravar.criarLog(mensagemDiscoAzure);
                            
                            monitorarLocal.update(
                                    "INSERT INTO registroComponente (fkComputadorComponente, ValorConsumido, DataHora, statusComputador)"
                                    + "VALUES"
                                    + "(?, ?, now(), 'Ativo')",
                                    listaComponentesLocal.get(2 + i).getIdComputadorComponente(), Double.valueOf(discoConvertido));
                            
                            String componente3Local = String.format("Banco de Dados Local: ID Componente:", listaComponentes.get(2+i).getIdComputadorComponente());
                            gravar.criarLog(componente3Local);
                            String mensagemDiscoLocal = String.format("Banco de Dados Local: Dados coletados do Disco:", discoConvertido);
                            gravar.criarLog(mensagemDiscoLocal);
                            
                            Double percentualDiscoUso = discos.get(i).getBytesDeEscritas() / Double.valueOf(discos.get(i).getTamanho()) * 100;
                            
                            if (monitoramentoDiscos.get(i).monitorarDisco70(percentualDiscoUso)) {
                                dadosDisco.setForeground(Color.yellow);
                                String slack70Disco = String.format("Disco Maior que 70%");
                                gravar.criarLog(slack70Disco);
                            }

                            if (monitoramentoDiscos.get(i).monitorarDisco90(percentualDiscoUso)) {
                                dadosDisco.setForeground(Color.RED);
                                String slack90Disco = String.format("Disco Maior que 90%");
                                gravar.criarLog(slack90Disco);
                            }
                        }

                        Thread.sleep(5000);
                    }
                } catch (Exception e) {
                    System.out.println("Erro de leitura!");
                    System.out.println(e);
                    gravar.criarLog("Erro de leitura");
                }
            }
        }).start();
    }

//    public void hostName() {
//        Looca looca = new Looca();
//        hostName.setText(looca.getProcessador().getIdentificador());
//    }
    public void sistemaOperacional() {
        Looca looca = new Looca();
        sistemaOperacional.setText(looca.getSistema().getSistemaOperacional());
        gravar.criarLog("Sistema Operacional:" +looca.getSistema().getSistemaOperacional());
    }
    
    public void finalizarProcessos(){
        List<Processo> processos = looca.getGrupoDeProcessos().getProcessos();
         
        for(Processo processo : processos){
            if(processo.getNome().contains("firefox")){
                ProcessBuilder processBuilder = new ProcessBuilder();
                System.out.println(processo.getNome());
                processBuilder.command("/bin/bash", "-c", "sudo kill -9 " +processo.getPid());
                
                try {
                    Process process = processBuilder.start();
           
                    process.waitFor();

                    process.destroy();
                    gravar.criarLog("Processo finalizado com sucesso");
                    gravar.criarLog("PID:"+processo.getPid());
                    gravar.criarLog("Nome do Processo:" + processo.getNome());
                }
                catch(Exception e){
                    System.err.println(e);
                    gravar.criarLog("Erro ao finalizar processo, Error: " + e);
                }
            }
        }
    }
    
    public void reiniciarMaquina(){
        if(checkReiniciar.isSelected()){
            ProcessBuilder processBuilder = new ProcessBuilder();
            
            processBuilder.command("/bin/bash", "-c", "sudo reboot");
                
                try {
                    Process process = processBuilder.start();
           
                    process.waitFor();

                    process.destroy();
                    
                }
                catch(Exception e){
                    System.err.println(e);
                }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkReiniciar;
    private javax.swing.JLabel dadosCpu;
    private javax.swing.JLabel dadosDisco;
    private javax.swing.JLabel dadosRam;
    private javax.swing.JLabel hostName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel sistemaOperacional;
    // End of variables declaration//GEN-END:variables
}
